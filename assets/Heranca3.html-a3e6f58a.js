import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,d as t}from"./app-578ab5bc.js";const i={},l=t('<h1 id="exercicio-de-heranca-3" tabindex="-1"><a class="header-anchor" href="#exercicio-de-heranca-3" aria-hidden="true">#</a> Exercício de Herança 3</h1><ol><li>Verdadeiro ou Falso, se falso justifique. <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> Em orientação a objetos herança é a capacidade de uma classe definir o seu comportamento e sua estrutura aproveitando definições de outra classe, normalmente conhecida como classe base ou classe pai.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> O objetivo da herança é generalizar o entendimento de uma classe criando novas características e comportamentos que vão além da superclasse.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> Classes concretas são classes que não produzem instâncias. Elas agrupam características e comportamentos que serão herdados por outras classes.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> Classes abstratas precisam ter métodos com implementação definida.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> Os métodos abstratos são obrigatoriamente implementados pelas classes filhas.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> Polimorfismo só pode ser utilizando com herança, não podendo ser aplicado a interface.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> As interfaces são estritamente modelos de comportamento.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> As interfaces não podem ser instanciadas pois não produzem objetos.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> As interfaces podem ter atributos de instância.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> Classes abstratas podem ter atributos de instância.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> As interfaces não podem ter métodos com corpo definido.</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> Classes abstratas não podem ter métodos com corpo definido.</label></li></ul></li></ol>',2),c=[l];function o(d,m){return e(),a("div",null,c)}const k=s(i,[["render",o],["__file","Heranca3.html.vue"]]);export{k as default};
